generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  emailVerified   Boolean      @default(false)
  passwordHash    String?
  authToken       String       @unique
  authMethod      Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  firstName       String?
  lastName        String?
  profilePhotoURL String?
  phoneNumber     String?      @unique
  phoneVerified   Boolean      @default(false)
  address         Address?
  admin           Admin?
  customer        Customer?
  mechanic        Mechanic?
  salesPerson     SalesPerson?
}

model Address {
  address        String
  city           String
  province       String
  postalCode     String
  country        String
  defaultAddress Boolean
  userId         String  @id @unique
  user           User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Customer {
  userId    String             @id @unique
  user      User               @relation(fields: [userId], references: [id])
  vehicle   CustomerVehicle?
  favorites VehicleFavorites[]

  @@index([userId])
}

model SalesPerson {
  userId       String        @id @unique
  user         User          @relation(fields: [userId], references: [id])
  vehicleSales SoldVehicle[]

  @@index([userId])
}

model Mechanic {
  userId String @id @unique
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Admin {
  userId String @id @unique
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Vehicle {
  id                 String           @id @default(uuid())
  vin                String?          @unique
  make               String?
  model              String?
  trim               String?
  year               Int?
  price              Int?
  odometer           Int?
  color              String?
  interiorColor      String?
  bodyStyle          String?
  fuelType           String?
  transmission       String?
  driveTrain         String?
  engine             String?
  engineCylinders    Int?
  engineDisplacement Int?
  engineHorsepower   Int?
  seats              Int?
  seatRows           Int?
  doors              Int?
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  description        String?
  customerVehicle    CustomerVehicle?
  inStockVehicle     InStockVehicle?
  soldVehicle        SoldVehicle?
  media              VehicleMedia[]

  @@index([vin])
}

model VehicleMedia {
  url       String
  vehicleId String
  type      String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  @@id([url, vehicleId])
  @@index([vehicleId])
}

model InStockVehicle {
  vehicleId String             @id @unique
  vehicle   Vehicle            @relation(fields: [vehicleId], references: [id])
  favorites VehicleFavorites[]

  @@index([vehicleId])
}

model SoldVehicle {
  vehicleId     String      @id @unique
  dateSold      DateTime    @default(now())
  salesPersonId String
  salesPerson   SalesPerson @relation(fields: [salesPersonId], references: [userId])
  vehicle       Vehicle     @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model CustomerVehicle {
  vehicleId  String   @unique
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [userId])
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])

  @@id([vehicleId, customerId])
  @@index([vehicleId, customerId])
}

model VehicleFavorites {
  id         String         @id @default(uuid())
  customerId String
  vehicleId  String
  dateAdded  DateTime       @default(now())
  vehicle    InStockVehicle @relation(fields: [vehicleId], references: [vehicleId])
  customer   Customer       @relation(fields: [customerId], references: [userId])

  @@unique([customerId, vehicleId])
}
